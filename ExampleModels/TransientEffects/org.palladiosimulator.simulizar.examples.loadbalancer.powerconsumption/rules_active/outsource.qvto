/*
 * This simple QVTO SimuLizar reconfiguration rule increases the processing rate of all
 * resources in case the monitored mean response time is greater than 3.0 (seconds). 
 *
 */

/*
 * Two modeltypes are declared. The http NS URIs correspond to those used to register the 
 * Ecore models in the environment. Alternatively, a workspace metamodel may be used 
 * in conjunction with mappings defined in the project properties.
 */
modeltype RUNTIMEMEASUREMENT uses 'http://simulizar.palladiosimulator.org/RuntimeMeasurement/1.0';
modeltype PCM_ALLOC uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Allocation/5.0';
modeltype PCM_REP uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Repository/5.0';
modeltype PCM_SEFF uses 'http://sdq.ipd.uka.de/PalladioComponentModel/SEFF/5.0';
modeltype PCM_SYS uses 'http://sdq.ipd.uka.de/PalladioComponentModel/System/5.0';
modeltype PCM_RES_ENV uses 'http://sdq.ipd.uka.de/PalladioComponentModel/ResourceEnvironment/5.0';
modeltype PCM_RES_TYPE uses 'http://sdq.ipd.uka.de/PalladioComponentModel/ResourceType/5.0';
modeltype PCM_USAGE uses 'http://sdq.ipd.uka.de/PalladioComponentModel/UsageModel/5.0';
modeltype PCM_FEATURE_CONF uses 'http://sdq.ipd.uka.de/FeatureConfig/2.0';
modeltype PCM_FEATURE_MOD uses 'http://sdq.ipd.uka.de/FeatureModel/2.0';
modeltype PCM_CORE uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Core/5.0';
modeltype PCM_COMP uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Core/Composition/5.0';
modeltype PCM_ENTITY uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Core/Entity/5.0';
modeltype PCM_PARAM uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Parameter/5.0';
modeltype PCM_STOEX uses 'http://sdq.ipd.uka.de/StochasticExpressions/2.2';
modeltype ACTIONS uses 'http://simulizar.palladiosimulator.org/Actions/Core/1.0';
modeltype INSTANCE uses 'http://simulizar.palladiosimulator.org/Actions/Instance/1.0';
modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';
/*
 * The transformation signature declares that a RuntimeMeasurement modeltype is required as input, while an PCM
 * modeltype is transformed inplace. The RuntimeMeasurement modeltype is referenced as 'RuntimeMeasurement' throughout the 
 * transformation definition, while no name is needed for the output PCM modeltype. Note that OCL 
 * type and namespace notation are used in operational QVT (: and :: respectively).
 */
transformation outsource(	in runtimeMeasurement : RUNTIMEMEASUREMENT,
							inout pcmAllocation : PCM_ALLOC,
							inout actionsInput : ACTIONS,
							out roleSets : INSTANCE
							) {
							
							
	// Define Threshold and Scale Out
	property threshold : Real = 7.0;
	property outsourceFactor : Real = 0.1;
	property actionRepository : ActionRepository = actionsInput.rootObjects()[core::ActionRepository]->any(true);
	property targetContainerId : String = '_3uVlIAEpEeS7FKokKTKFow';
	property sourceContainerId : String = '_yaTfsAEpEeS7FKokKTKFow';
	
	/**
	 * The main transformation.
	 * This is the entry point to the overall transformation.
	 */
	main() {
	
		log('SimuLizar Outsource Rule Transformation started');
		
		assert fatal(runtimeMeasurement.rootObjects()[RuntimeMeasurement]->size() > 0)
			with log ("No Measurements found!");
			
		assert fatal(pcmAllocation.rootObjects()[Allocation]->size() > 0)
			with log ("Allocation Model is empty!");
			
		runtimeMeasurement.rootObjects()[RuntimeMeasurement]->checkCondition();	

	}
	
	helper Set(RuntimeMeasurement) :: checkCondition() : Boolean {
	
		self->forEach(measurement) {
		log('Measured value is ' + measurement.measuringValue.toString());
		
			if (measurement.measuringValue > threshold) {
		
				log('Threshold is exceeded');
				pcmAllocation.rootObjects()[Allocation]->forAll(
					allocation : Allocation | 
					outSourceProcessing(allocation.allocationContexts_Allocation, allocation.targetResourceEnvironment_Allocation)
				);
				return true;
			};
		};
		
		log('No measurements match the condition. Number of measurements is ' + self->size().toString());
		return false;
	}
	
	/**
	 * outsource Processing.
	 */
	helper outSourceProcessing(allocationContexts : Set(AllocationContext), resourceEnvironment : ResourceEnvironment) : Boolean {
	
		log('Found ' +  allocationContexts->size().toString() + ' AllocationContexts');
	
		allocationContexts->forEach(allocation){
			log("Assembly Context name: " + allocation.assemblyContext_AllocationContext.entityName);
			if(allocation.assemblyContext_AllocationContext.entityName = "Server1" and targetContainerId <> allocation.resourceContainer_AllocationContext.id) {
				var vmMigrate : Action := actionRepository.actions->select(a | a.id = '_3MyFAOp9EeS7J-g-NrN0TQ')->any(true);
				var containerSource : ResourceContainer := resourceEnvironment.resourceContainer_ResourceEnvironment->select(c | c.id = sourceContainerId)->any(true);
				var containerTarget : ResourceContainer := resourceEnvironment.resourceContainer_ResourceEnvironment->select(c | c.id = targetContainerId)->any(true);
				var roleSet : RoleSet := object RoleSet@roleSets {
					roles += object instance::Role {
						roleType := vmMigrate.getRoleTypeById('_kPTj0OztEeSasuhUPGMaRg');
						value := allocation.assemblyContext_AllocationContext.oclAsType(EObject);
					};
					roles += object instance::Role {
						roleType := vmMigrate.getRoleTypeById('_56tD0ezuEeSasuhUPGMaRg');
						value := containerSource.oclAsType(EObject);
					};
					roles += object instance::Role {
						roleType := vmMigrate.getRoleTypeById('_or2AkeztEeSasuhUPGMaRg');
						value := containerTarget.oclAsType(EObject);
					};	
				};
				vmMigrate.execute(roleSet);
				log('Migration executed');
			}
		};
		
		return false;
	}
	
	query Action::getRoleTypeById(id : String) : RoleType {
		return self.involvedRoles->select(r | r.id = id)->any(true);
	}
	
}