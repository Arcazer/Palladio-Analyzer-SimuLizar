/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package de.upb.pcm.pms.provider;

import de.upb.pcm.pms.util.PmsAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PmsItemProviderAdapterFactory extends PmsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
   /**
    * This keeps track of the root adapter factory that delegates to this adapter factory.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ComposedAdapterFactory parentAdapterFactory;

   /**
    * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected IChangeNotifier changeNotifier = new ChangeNotifier();

   /**
    * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected Collection<Object> supportedTypes = new ArrayList<Object>();

   /**
    * This constructs an instance.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public PmsItemProviderAdapterFactory()
   {
      supportedTypes.add(IEditingDomainItemProvider.class);
      supportedTypes.add(IStructuredItemContentProvider.class);
      supportedTypes.add(ITreeItemContentProvider.class);
      supportedTypes.add(IItemLabelProvider.class);
      supportedTypes.add(IItemPropertySource.class);
   }

   /**
    * This keeps track of the one adapter used for all {@link de.upb.pcm.pms.PMSModel} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected PMSModelItemProvider pmsModelItemProvider;

   /**
    * This creates an adapter for a {@link de.upb.pcm.pms.PMSModel}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createPMSModelAdapter()
   {
      if (pmsModelItemProvider == null)
      {
         pmsModelItemProvider = new PMSModelItemProvider(this);
      }

      return pmsModelItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link de.upb.pcm.pms.PerformanceMeasurement} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected PerformanceMeasurementItemProvider performanceMeasurementItemProvider;

   /**
    * This creates an adapter for a {@link de.upb.pcm.pms.PerformanceMeasurement}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createPerformanceMeasurementAdapter()
   {
      if (performanceMeasurementItemProvider == null)
      {
         performanceMeasurementItemProvider = new PerformanceMeasurementItemProvider(this);
      }

      return performanceMeasurementItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link de.upb.pcm.pms.MeasurementSpecification} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected MeasurementSpecificationItemProvider measurementSpecificationItemProvider;

   /**
    * This creates an adapter for a {@link de.upb.pcm.pms.MeasurementSpecification}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createMeasurementSpecificationAdapter()
   {
      if (measurementSpecificationItemProvider == null)
      {
         measurementSpecificationItemProvider = new MeasurementSpecificationItemProvider(this);
      }

      return measurementSpecificationItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link de.upb.pcm.pms.Intervall} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected IntervallItemProvider intervallItemProvider;

   /**
    * This creates an adapter for a {@link de.upb.pcm.pms.Intervall}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createIntervallAdapter()
   {
      if (intervallItemProvider == null)
      {
         intervallItemProvider = new IntervallItemProvider(this);
      }

      return intervallItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link de.upb.pcm.pms.DelayedIntervall} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected DelayedIntervallItemProvider delayedIntervallItemProvider;

   /**
    * This creates an adapter for a {@link de.upb.pcm.pms.DelayedIntervall}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createDelayedIntervallAdapter()
   {
      if (delayedIntervallItemProvider == null)
      {
         delayedIntervallItemProvider = new DelayedIntervallItemProvider(this);
      }

      return delayedIntervallItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link de.upb.pcm.pms.TimeFrame} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected TimeFrameItemProvider timeFrameItemProvider;

   /**
    * This creates an adapter for a {@link de.upb.pcm.pms.TimeFrame}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createTimeFrameAdapter()
   {
      if (timeFrameItemProvider == null)
      {
         timeFrameItemProvider = new TimeFrameItemProvider(this);
      }

      return timeFrameItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link de.upb.pcm.pms.UniqueElement} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected UniqueElementItemProvider uniqueElementItemProvider;

   /**
    * This creates an adapter for a {@link de.upb.pcm.pms.UniqueElement}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createUniqueElementAdapter()
   {
      if (uniqueElementItemProvider == null)
      {
         uniqueElementItemProvider = new UniqueElementItemProvider(this);
      }

      return uniqueElementItemProvider;
   }

   /**
    * This returns the root adapter factory that contains this factory.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public ComposeableAdapterFactory getRootAdapterFactory()
   {
      return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
   }

   /**
    * This sets the composed adapter factory that contains this factory.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
   {
      this.parentAdapterFactory = parentAdapterFactory;
   }

   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public boolean isFactoryForType(Object type)
   {
      return supportedTypes.contains(type) || super.isFactoryForType(type);
   }

   /**
    * This implementation substitutes the factory itself as the key for the adapter.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter adapt(Notifier notifier, Object type)
   {
      return super.adapt(notifier, this);
   }

   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Object adapt(Object object, Object type)
   {
      if (isFactoryForType(type))
      {
         Object adapter = super.adapt(object, type);
         if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
         {
            return adapter;
         }
      }

      return null;
   }

   /**
    * This adds a listener.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void addListener(INotifyChangedListener notifyChangedListener)
   {
      changeNotifier.addListener(notifyChangedListener);
   }

   /**
    * This removes a listener.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void removeListener(INotifyChangedListener notifyChangedListener)
   {
      changeNotifier.removeListener(notifyChangedListener);
   }

   /**
    * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void fireNotifyChanged(Notification notification)
   {
      changeNotifier.fireNotifyChanged(notification);

      if (parentAdapterFactory != null)
      {
         parentAdapterFactory.fireNotifyChanged(notification);
      }
   }

   /**
    * This disposes all of the item providers created by this factory. 
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void dispose()
   {
      if (pmsModelItemProvider != null) pmsModelItemProvider.dispose();
      if (performanceMeasurementItemProvider != null) performanceMeasurementItemProvider.dispose();
      if (measurementSpecificationItemProvider != null) measurementSpecificationItemProvider.dispose();
      if (intervallItemProvider != null) intervallItemProvider.dispose();
      if (delayedIntervallItemProvider != null) delayedIntervallItemProvider.dispose();
      if (timeFrameItemProvider != null) timeFrameItemProvider.dispose();
      if (uniqueElementItemProvider != null) uniqueElementItemProvider.dispose();
   }

}
