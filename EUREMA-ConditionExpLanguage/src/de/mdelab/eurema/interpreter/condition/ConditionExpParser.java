/* Generated By:JavaCC: Do not edit this line. ConditionExpParser.java */
package de.mdelab.eurema.interpreter.condition;
import de.mdelab.eurema.interpreter.condition.QueryExecutionInformation;
import java.io.StringReader;
import java.io.Reader;

public class ConditionExpParser implements ConditionExpParserConstants {
  private QueryExecutionInformation qei;

  public ConditionExpParser()
  {
    // Initialize parser with empty expression.    // Expression to be parsed and evaluated is set by the parseExp method.    this ((Reader) (new StringReader("")));
  }

  public boolean parseExp(String s, QueryExecutionInformation qei)
  {
    this.ReInit((Reader) (new StringReader(s)));
    this.qei = qei;
    try
    {
      return this.parse();
    }
    catch (Exception e)
    {
      e.printStackTrace();
      throw new RuntimeException(e);
    }
  }

/**  *  Top level */
  final public boolean parse() throws ParseException {
  boolean result;
    result = exp();
    jj_consume_token(0);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/*** Expression*/
  final public boolean exp() throws ParseException {
  boolean left;
  boolean right;
  boolean isAND = false;
    left = boolExp();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        isAND = true;
        break;
      case OR:
        jj_consume_token(OR);
        isAND = false;
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = boolExp();
      if (isAND)
      {
        {if (true) return left && right;}
      }
      else
      {
        {if (true) return left || right;}
      }
    }
    {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

/*** Boolean Expression*/
  final public boolean boolExp() throws ParseException {
  boolean result;
  long left;
  long right;
  boolean isEquals = false;
  boolean isNotEquals = false;
  boolean isGreater = false;
  boolean isSmaller = false;
  boolean isGreaterEquals = false;
  boolean isSmallerEquals = false;
    if (jj_2_1(2147483647)) {
      jj_consume_token(LPAREN);
      result = exp();
      jj_consume_token(RPAREN);
    {if (true) return result;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
        jj_consume_token(LPAREN);
        result = exp();
        jj_consume_token(RPAREN);
    {if (true) return !result;}
        break;
      case LPAREN:
      case MINUS:
      case CURRENT_TIME:
      case NUMBER:
      case PARAM:
        left = sumExp();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUALS:
          jj_consume_token(EQUALS);
      isEquals = true;
          break;
        case NOT_EQUALS:
          jj_consume_token(NOT_EQUALS);
      isNotEquals = true;
          break;
        case GREATER:
          jj_consume_token(GREATER);
      isGreater = true;
          break;
        case SMALLER:
          jj_consume_token(SMALLER);
      isSmaller = true;
          break;
        case GREATER_EQUALS:
          jj_consume_token(GREATER_EQUALS);
      isGreaterEquals = true;
          break;
        case SMALLER_EQUALS:
          jj_consume_token(SMALLER_EQUALS);
      isSmallerEquals = true;
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        right = sumExp();
    if (isEquals)
    {
      {if (true) return left == right;}
    }
    else if (isNotEquals)
    {
      {if (true) return left != right;}
    }
    else if (isGreater)
    {
      {if (true) return left > right;}
    }
    else if (isSmaller)
    {
      {if (true) return left < right;}
    }
    else if (isGreaterEquals)
    {
      {if (true) return left >= right;}
    }
    else if (isSmallerEquals)
    {
      {if (true) return left <= right;}
    }
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/*** PLUS, MINUS*/
  final public long sumExp() throws ParseException {
  long left;
  long right;
  boolean isPlus = false;
    left = termExp();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        isPlus = true;
        break;
      case MINUS:
        jj_consume_token(MINUS);
        isPlus = false;
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = termExp();
      if (isPlus)
      {
        {if (true) return left + right;}
      }
      else
      {
        {if (true) return left - right;}
      }
    }
    {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

/*** MULTIPLY, DIVIDE*/
  final public long termExp() throws ParseException {
  long left;
  long right;
  boolean isMult = false;
    left = unary();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
        isMult = true;
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        isMult = false;
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = unary();
      if (isMult)
      {
        {if (true) return left * right;}
      }
      else
      {
        {if (true) return left / right;}
      }
    }
    {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

/*** Basic Numerical Expression*/
  final public long unary() throws ParseException {
  long result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      result = element();
    {if (true) return result * - 1;}
      break;
    case LPAREN:
    case CURRENT_TIME:
    case NUMBER:
    case PARAM:
      result = element();
    {if (true) return result;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public long element() throws ParseException {
  Token token;
  long result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      result = sumExp();
      jj_consume_token(RPAREN);
    {if (true) return result;}
      break;
    case NUMBER:
      token = jj_consume_token(NUMBER);
    {if (true) return Long.parseLong(token.image);}
      break;
    case CURRENT_TIME:
      jj_consume_token(CURRENT_TIME);
    {if (true) return System.currentTimeMillis();}
      break;
    case PARAM:
      token = jj_consume_token(PARAM);
    //System.out.println(token.image + " ==== " + token.specialToken.image);
    if (token.specialToken.image.equals("C_SINCE"))
    {
      {if (true) return this.qei.retrieveCount(token.image);}
    }
    else if (token.specialToken.image.equals("T_WHEN"))
    {
      {if (true) return this.qei.retrieveTime(token.image);}
    }
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_8() {
    if (jj_3R_4()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_5()) {
    jj_scanpos = xsp;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(PARAM)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(CURRENT_TIME)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(SMALLER_EQUALS)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(GREATER_EQUALS)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(MULTIPLY)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(SMALLER)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(NOT_EQUALS)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_3R_9()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    }
    }
    }
    }
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_1() {
    Token xsp;
    if (jj_scan_token(9)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(9)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_4()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) return true;
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ConditionExpParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xc0,0xc0,0x1f800,0x8a40220,0x60000,0x60000,0x180000,0x180000,0x8a40200,0x8a00200,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ConditionExpParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ConditionExpParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ConditionExpParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ConditionExpParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ConditionExpParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ConditionExpParser(ConditionExpParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ConditionExpParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[29];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 29; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
