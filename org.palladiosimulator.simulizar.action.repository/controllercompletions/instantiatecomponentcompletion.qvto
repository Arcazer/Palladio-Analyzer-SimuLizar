/*
 * This simple QVTO SimuLizar reconfiguration rule migrates the application to another
 * server node as defined by the OptimizationPlan
 *
 */

/*
 * Two modeltypes are declared. The http NS URIs correspond to those used to register the 
 * Ecore models in the environment. Alternatively, a workspace metamodel may be used 
 * in conjunction with mappings defined in the project properties.
 */

modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.1';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.1';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.1';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.1';
modeltype PCM_COMP uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.1';
modeltype ACTION_MAPPING uses 'http://simulizar.palladiosimulator.org/Actions/Mapping/1.1';
modeltype ACTION_CORE uses 'http://simulizar.palladiosimulator.org/Actions/Core/1.1';
modeltype ACTION_INSTANCE uses 'http://simulizar.palladiosimulator.org/Actions/Instance/1.1';

transformation instantiateCOmponent(
							inout pcmAllocation : PCM_ALLOC,
							in pcmControllerRepository : PCM_REP,
							in actionRoleSet : ACTION_INSTANCE,
							in actionStep : ACTION_CORE,
							out actionMapping : ACTION_MAPPING
							) {
							
	/**
	 * The main transformation.
	 * This is the entry point to the overall transformation.
	 */
	main() {	
		assert fatal(pcmAllocation.rootObjects()[Allocation]->size() > 0)
			with log ("Allocation Model is empty!");
		var allocation : Allocation := pcmAllocation.rootObjects()[Allocation]->any(true);
		var step := actionStep.rootObjects()[ResourceDemandingAction]->any(true);
		log("Executing step " + step.entityName);
		var roleSet : RoleSet :=  actionRoleSet.rootObjects()[RoleSet]->any(true);		
		var controllerRepository : Repository := pcmControllerRepository.rootObjects()[Repository]->any(true);
		var roles := roleSet.roles;
		var targetResourceContainerRole : instance::Role := roles->select(role | role.roleType.id = '_9TESQRwLEeW4AMv4FxCz8w')->any(true);
		var instantiatedComponentRole : instance::Role := roles->select(role | role.roleType.id = '_p7wp4RwMEeW4AMv4FxCz8w')->any(true);
		var instantiationControllerLocationRole : instance::Role := roles->select(role | role.roleType.id = '_MEXt8RwNEeW4AMv4FxCz8w')->any(true);
		
		var targetResourceContainer : ResourceContainer := targetResourceContainerRole.value.oclAsType(ResourceContainer);
		var instantiatedComponent : BasicComponent := instantiatedComponentRole.value.oclAsType(BasicComponent);
		var instantiationControllerLocation : ResourceContainer := instantiationControllerLocationRole.value.oclAsType(ResourceContainer);
		var componentInstantiationController : BasicComponent := controllerRepository.getComponentById("_oATY4KJKEeWC7_GU8VFHHA");
		var componentInstantiationLocation: BasicComponent := controllerRepository.getComponentById("_1TXxcKJKEeWC7_GU8VFHHA");
		var assembly : AssemblyContext := getInstantiationControllerAssembly(allocation, instantiationControllerLocation, targetResourceContainer, 
			componentInstantiationController, componentInstantiationLocation,instantiatedComponent);
		if(assembly = null) {
			step.map instantiateComponent(allocation, controllerRepository, roleSet, componentInstantiationController, componentInstantiationLocation,
				instantiationControllerLocation, targetResourceContainer);
		} else {
			log(assembly.entityName);
			step.controllerCalls->map createMappingForExistingComponent(assembly, allocation);
		}
	}
	
	mapping ControllerCall::createMappingForExistingComponent(assemblyContext : AssemblyContext, allocation : Allocation) : Mapping@actionMapping {
		var system : System := allocation.system_Allocation;
		result.controllerMappings += object ControllerMapping {
			entityName := 'Preexisting Controller Completion Mapping Lookup';
			mappedCall := self;
			controllerRole := system.providedRoles_InterfaceProvidingEntity->selectByType(OperationProvidedRole)->select(i | i.providedInterface__OperationProvidedRole.id = self.calledSignature.interface__OperationSignature.id)->oclAsType(OperationProvidedRole)->any(true);			
		};
	}
	
	mapping ResourceDemandingAction::instantiateComponent(inout allocation : Allocation, controllerRepository : Repository, roleSet : RoleSet,
		componentInstantiationController : BasicComponent, componentInstantiationLocation : BasicComponent,
		controllerHost : ResourceContainer, targetHost: ResourceContainer) : Mapping@actionMapping {
		log("Adding controllers for VM migration");
		result.controllerMappings := self.controllerCalls->map addVMControllers(allocation, controllerRepository, roleSet, 
			componentInstantiationController, componentInstantiationLocation, controllerHost, targetHost);
	}
	
	query getInstantiationControllerAssembly(allocation : Allocation, instantiationControllerLocation : ResourceContainer, targetResourceContainer : ResourceContainer, 
		componentInstantiationController : BasicComponent, componentInstantiationLocation: BasicComponent, instantiatedComponent : BasicComponent) : AssemblyContext {
		var assembliesOnLocation := allocation.allocationContexts_Allocation->select(c | c.resourceContainer_AllocationContext.id = instantiationControllerLocation.id);
		assembliesOnLocation->forEach(controller) {
			log('Assemblies on location: ' + controller.id);
		};
		var migrationControllersOnLocation := assembliesOnLocation.assemblyContext_AllocationContext->select(c | c.encapsulatedComponent__AssemblyContext.id = componentInstantiationController.id);
		migrationControllersOnLocation->forEach(migrController) {
			log('Instantiation controllers on target: ' + migrController.encapsulatedComponent__AssemblyContext.id);
		};
		var connectors := allocation.system_Allocation.connectors__ComposedStructure->selectByType(AssemblyConnector);
		connectors->forEach(conn) {
			log('Connection id: ' + conn.id);
		};
		var cProvidingController := connectors->select(c | migrationControllersOnLocation.id->includes(c.requiringAssemblyContext_AssemblyConnector.id));
		cProvidingController->forEach(controller) {
			log('Controller id: ' + controller.id);
		};
		var targetCorrectSource := cProvidingController->select(c | c.providingAssemblyContext_AssemblyConnector.getControllerHost(allocation).id = targetResourceContainer.id);
		return targetCorrectSource.requiringAssemblyContext_AssemblyConnector->any(true);
	}
	
	mapping ControllerCall::addVMControllers(inout allocation : Allocation, controllerRepository : Repository, roleSet : RoleSet,
		componentInstantiationController : BasicComponent, componentInstantiationLocation : BasicComponent,
		controllerHost : ResourceContainer, targetHost: ResourceContainer) : ControllerMapping {
		log("Adding VM controllers");
		
		var assemblyComponentInstantiationController : AssemblyContext := componentInstantiationController.createAssembly(controllerHost);
		var assemblyComponentInstantiationLocation : AssemblyContext := componentInstantiationLocation.createAssembly(targetHost);
		var system : System := allocation.system_Allocation;
		
		system.assemblyContexts__ComposedStructure += assemblyComponentInstantiationController;
		system.assemblyContexts__ComposedStructure += assemblyComponentInstantiationLocation;
		
		system.connectors__ComposedStructure += linkAssemblies(assemblyComponentInstantiationController, componentInstantiationController.selectRequiredRoleById('_od2lpaJMEeWC7_GU8VFHHA'),
						assemblyComponentInstantiationLocation, componentInstantiationLocation.selectProvidedRoleById('_jeP4EKJMEeWC7_GU8VFHHA'));
		assemblyComponentInstantiationController.allocateAt(allocation, controllerHost);
		assemblyComponentInstantiationLocation.allocateAt(allocation, targetHost);
		
		// add system interface to controller component
		var controllerProvidedRole := object OperationProvidedRole {
			entityName := 'SystemProvided' + assemblyComponentInstantiationController.entityName;
			providingEntity_ProvidedRole := componentInstantiationController;
			providedInterface__OperationProvidedRole := self.calledSignature.interface__OperationSignature;			
		};
		
		system.providedRoles_InterfaceProvidingEntity += controllerProvidedRole;
		system.connectors__ComposedStructure += object ProvidedDelegationConnector {
			innerProvidedRole_ProvidedDelegationConnector := componentInstantiationController.selectProvidedRoleById('_L2VLkKJMEeWC7_GU8VFHHA');
			outerProvidedRole_ProvidedDelegationConnector := controllerProvidedRole;
			assemblyContext_ProvidedDelegationConnector := assemblyComponentInstantiationController;
		};
		result.mappedCall := self;
		result.entityName := 'mapped' + mappedCall.entityName;
		result.controllerRole := controllerProvidedRole;
	}
	
	helper AssemblyContext::allocateAt(inout allocation : Allocation, container : ResourceContainer) {
		allocation.allocationContexts_Allocation += object AllocationContext {
			entityName := self.entityName + 'At' + container.entityName;
			resourceContainer_AllocationContext := container;
			assemblyContext_AllocationContext := self;
		}
	}
	
	query BasicComponent::selectRequiredRoleById(id : String) : OperationRequiredRole {
		return self.requiredRoles_InterfaceRequiringEntity->select(c | c. id = id)->any(true).oclAsType(OperationRequiredRole);
	}
	
	query BasicComponent::selectProvidedRoleById(id : String) : OperationProvidedRole {
		return self.providedRoles_InterfaceProvidingEntity->select(c | c. id = id)->any(true).oclAsType(OperationProvidedRole)
	}
	
	helper linkAssemblies(assemblyRequiring : AssemblyContext, requiredRole : OperationRequiredRole, 
							assemblyProviding : AssemblyContext, providedRole : OperationProvidedRole) : AssemblyConnector {
		return object AssemblyConnector {
			entityName := assemblyRequiring.entityName + "To" + assemblyProviding.entityName;
			requiringAssemblyContext_AssemblyConnector := assemblyRequiring;
			providingAssemblyContext_AssemblyConnector := assemblyProviding;
			requiredRole_AssemblyConnector := requiredRole;
			providedRole_AssemblyConnector := providedRole;			
		}
	}
	
	helper BasicComponent::createAssembly(inout container : ResourceContainer) : AssemblyContext {
		var nameInput := self.entityName;
		return object AssemblyContext {
			entityName :=  nameInput + "AssemblyCtxOn" + container.entityName;
			encapsulatedComponent__AssemblyContext := self;
		}
	}
	
	query Repository::getComponentById(id : String) : BasicComponent {
		return self.components__Repository->select(component | component.id = id)->any(true)->oclAsType(BasicComponent)->any(true);
	}
	
	query AssemblyContext::getControllerHost(allocation : Allocation) : ResourceContainer {
		return allocation.allocationContexts_Allocation->select(allocationContext |allocationContext.assemblyContext_AllocationContext.id = self.id)->any(true).resourceContainer_AllocationContext;
	}
	
	query getResourceEnv() : ResourceEnvironment{
		var resEnv:=pcmAllocation.rootObjects()[Allocation].targetResourceEnvironment_Allocation;
		return resEnv->any(true);
	}
	
}